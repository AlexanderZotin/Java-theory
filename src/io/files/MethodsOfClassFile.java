package theory.io.files;

import java.io.File;
import static java.io.File.separator;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;

/*
     Основные методы класса java.io.File для работы с файлами:
     --------------------------------------------------------------------------------------
     |        метод              |                    что делает                            |
	 --------------------------------------------------------------------------------------
     | boolean isDirectory()	 |      Является ли объект директорией                      |
	 --------------------------------------------------------------------------------------
     | boolean isFile()	         |      Является ли объект файлом                           |
	 --------------------------------------------------------------------------------------
     | long length()	         |      Возвращает размер файла в байтах.                   |
	 --------------------------------------------------------------------------------------
     | boolean createNewFile()   |                                                          |
	 | throws IOException	     |      Создает файл. Если такой файл уже был,              |
	 |                           |      то возвращает false.                                |
	 ---------------------------------------------------------------------------------------
     | boolean mkdir()	         |      Создает директорию. Название mkdir происходит       |
	 |                           |      от "make directory".                                |
	 ---------------------------------------------------------------------------------------
     | boolean mkdirs()	         |      Создает директорию и все поддиректории.             |
	 ---------------------------------------------------------------------------------------
     | boolean delete()	         |      Удаляет файл объекта на диске. Если объект –        |
	 |                           |      директория, то только, если в ней нет файлов.       |
	 ---------------------------------------------------------------------------------------
     | void deleteOnExit()	     |      Добавляет файл в специальный список файлов, которые |
     |                           |      будут автоматически удалены при закрытии программы. |
	 ---------------------------------------------------------------------------------------
     | File createTempFile(      |      Создает «временный файл» — файл с случайно          |
	 | String prefix,            |      сгенерированным уникальным именем – вроде dasd4d5s".|
     | String suffix,            |      Дополнительные параметры – префикс к имени, суффикс |
	 | File directory)	         |      (окончание). Если директория не указана, то файл    |
     | throws IOException		 |	    создается в специальной директории ОС               |
	 |							 | 		для временных файлов                                |
     ---------------------------------------------------------------------------------------
     | boolean exists()	         |      Возвращает true, если файл с таким именем существует|
     |                           |	    на диске компьютера.                                |
	 ---------------------------------------------------------------------------------------
	 | String getAbsolutePath()	 |      Возвращает полный путь файла со всеми               |
	 |                           |      поддиректориями.                                    |
	 ---------------------------------------------------------------------------------------
     | String getCanonicalPath() | 	    Возвращает канонический путь файла. Например,       |
	 | throws IOException        |      преобразовывает путь "c:/dir/dir2/../a.txt"         |
 	 |							 |		к пути "c:/dir/a.txt".                              |
	 ---------------------------------------------------------------------------------------
     | String[] list()	         |      Возвращает массив имен файлов, которые содержатся в |
	 |                           |      директории, которой является текущий объект-файл.   |
	 ---------------------------------------------------------------------------------------
     | File[] listFiles()	     |      Возвращает массив файлов, которые содержатся в      |
	 |                           |      директории, которой является текущий объект-файл.   |
	 ---------------------------------------------------------------------------------------
     | long getTotalSpace()	     |      Возвращает размер диска (количество байт) на        |
	 |                           |      котором расположен файл.                            |
	 ---------------------------------------------------------------------------------------
     | long getFreeSpace()	     |      Возвращает количество свободного места              |
	 |                           |    (количество байт) на диске, на котором расположен файл|
	 ---------------------------------------------------------------------------------------
     | boolean renameTo(File)	 |      Переименовывает файл – содержимое файла фактически  |
 	 |                           |      получает новое имя. Т.е. можно переименовать файл   |
	 |							 |	    "c:/dir/a.txt" в "d:/out/text/b.doc".               |
	 ---------------------------------------------------------------------------------------
     | String getName()	         |      Возвращает только имя файла, без пути.              |
	 ---------------------------------------------------------------------------------------
     | String getParent()	     |      Возвращает только путь (директорию) к текущему      |
	 |                           |      файлу, без самого имени.                            |
	 ---------------------------------------------------------------------------------------
     | Path toPath()	         |      Возвращает объект Path, который соответствует       |
	 |                           |      текущему объекту File.                              |
	 ---------------------------------------------------------------------------------------
	 | boolean isHidden()        |      Возвращает true, если файл скрытый, и false -       |
	 |                           |      если нет.                                           |
	 ---------------------------------------------------------------------------------------
	 | static File[] listRoots() |      Возвращает список корневых каталогов(дисков)        |
	 |                           |      на компьютере.                                      |                    
	 ---------------------------------------------------------------------------------------
	 | long lastModified()       |      Возвращает время последнего изменения файла,        |
 	 |                           |      отсчёт в миллисекундах с 1 января 1970 года.        |
	 ---------------------------------------------------------------------------------------
*/

public class MethodsOfClassFile{

    public static void main(String [] args){
        StringBuilder path = new StringBuilder();
	    path.append("src")
	    .append(separator)
	    .append("io")
	    .append(separator)
	    .append("files")
	    .append(separator)
	    .append("test")
	    .append(separator);
        File folder = new File(path.toString());
	    File file = new File(folder.getAbsolutePath() + separator + "Test.txt");
	    create(folder, file);
	    aboutDirectory(folder);
	    aboutFile(file);
	    System.out.println("Логические диски на компьютере: " + Arrays.toString(File.listRoots()));
	    if(askToDelete()){
	        System.out.println("Файл удалён? " + file.delete());
		    System.out.println("Папка удалена? " + folder.delete());
	    }
    }

    public static void create(File folder, File file){
        folder.mkdir();
        if(!folder.isDirectory()) {
	        throw new IllegalArgumentException("объект класса File должен быть директорией");
	    }
	    try{
	        file.createNewFile();
	    } catch(IOException e){
	        e.printStackTrace();
	    }
    }

    public static void aboutDirectory(File folder){
        if(!folder.isDirectory() || !folder.exists()){
	        throw new IllegalArgumentException("объект класса File должен быть cуществующей директорией");
	    }
	    System.out.println("------------------------------------------------------------------------");
	    System.out.println("Папка: " + folder);
	    System.out.println("Короткое имя папки: " + folder.getName());
	    String [] fileNames = folder.list();
	    if(fileNames == null){
	        System.out.println("Папка пустая.");
	    } else {
	        System.out.println("Список всех файлов в папке: " + Arrays.toString(fileNames));
        }
	    long totalSpace =  folder.getTotalSpace();
	    long gigaBytes =  totalSpace / 1024 / 1024 / 1024;
        System.out.println("Размер диска, на котором расположена папка, составляет " + gigaBytes + " гигабайт.");
	    long freeSpace = folder.getFreeSpace() / 1024 / 1024 / 1024;
        System.out.println("На диске, на котором расположена папка, есть " + freeSpace + 
	    " гигабайт свободного места.");
	    System.out.println("Папка - скрытая? " + folder.isHidden());
	    System.out.println("------------------------------------------------------------------------");
    }

    public static void aboutFile(File file){
        if(!file.isFile() || !file.exists()){
	        throw new IllegalArgumentException("объект класса File должен быть cуществующим файлом");
	    }
        System.out.println("------------------------------------------------------------------------");
	    System.out.println("Файл: " + file);
	    System.out.println("Короткое имя файла: " + file.getName());
	    System.out.println("Размер файла в байтах: " + file.length());
	    System.out.println("Файл - скрытый? " + file.isHidden());
	    System.out.println("C 1970 года до изменения файла прошло " + (file.lastModified() / 1000 / 60 / 60 / 24 / 7) + " недель.");
	    System.out.println("------------------------------------------------------------------------");
    }

    public static boolean askToDelete(){
        Scanner scanner = new Scanner(System.in, "Cp866");
	    System.out.println("Удалить файл и папку? Введите да, чтобы удалить, или любой другой символ, чтобы не удалять");
	    String userInput = scanner.nextLine();
	    if(userInput == null){
     	    return false;
	    }
	    return userInput.equalsIgnoreCase("да");
    }
  
}
